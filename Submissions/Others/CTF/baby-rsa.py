from Crypto.Util.number import isPrime, inverse, long_to_bytes
import operator as op
from functools import reduce

def get_sqrt(val):
  L = 0
  R = val
  while R - L > 1:
    mid = (L + R) // 2
    if mid * mid <= val:
      L = mid
    else:
      R = mid
  return L

def big_exp(a, e, mod):
  a %= mod
  ans = 1
  while e:
    if e % 2 == 1:
      ans = (ans * a) % mod
    a = (a * a) % mod
    e = e // 2
  return ans

prime_squares = [
  126082669918521595641730203940469179424419993868672309779479585782866442019570370232576294727357189958815139161577715953581376289245179280786782372792987974078848325643403145693005163963734097522075810410347723636891179562914889296043061147924253053344561143515733737587930921668984069049521993379038475722161,
  88579932027668539868777652078627178779101477181198194075753504790122846803247054464929496662996431482509046167512935591381335705928236026001266796225016387204665409280523346088969677508942187133932650698156926761710357829516448793040909859763980018966292421849689965835944674416506232196269086641585224356601,
  57637266101607374262731050671242121191022494633576565944790430853385323804517575136381021802744987570080333042463437191033720483196366479439798771244674024281033520403563412367300270263349690657702466289385959211943458848055835963664217576150350355829292598372629103069452484245641223892367799396585052883169,
  86046385451557788480949177638871408447105258048449460079934022048301458361550624223052748597261866296086346902745375264564873635473110075950711990220519957983039954452656496433392581868740751508755344767751891517807798722415513773973242483269432579092834773012066682303717822265796416376871444350084995049369,
  109961369666124760120086151011106467220073737424884049361251346660859549948609197468824681237895691903749738121697673269695975075652231557968998218873453407843899983585771966866944024349229345667053087324184878101629754124863813304305837149170604214026691716729094814431835576110327337257930600362971828963369
]
remainders = [
  84051335899882141462981944698231965254356853619779269639513159428421507384214445230430634994350129167425486693561069725288981198927864760282922229323223178701655703454884233609714048442682424361440571371103066202221985593068407343004984882381469931627873211305756891257072274033071623811305142954520082597264,
  69555910021411630828047736421782771750199276084455739627930521532966040632463613200910100061719349101947284924998983767184823206669180354044489864218950981567206354384457688260113755132257456541173090292936286598070226404966900431712446935962733289209278752101895717033291621438157490912135522714600838946967,
  46373502412790550285008401866827275886484641780111380299793646189471588319443738448661742985860213514274461343769416020757521016645579125228422115383343350541834688693418428748138187107982066727098471720400069685335846433029323809005845308515240116051591026897680744757028555742407628350594626192710552559313,
  34445344499533953562585675721383321615176417330142790437332570887761224653446862671696113138881392854801420133142527295614799060361734328376431746636108821030280671898893521281973640515868504612768867183423081141333762850515957589362199415812433603881084174040737933105918435875258764287686007690620674772791,
  19035832999548896494619974562881408956459701410763547749604571520787246412671541244558560928112104516435967705674447561401536270689949693659611845951163674863146939575274670265518556637552157178660572380202446651714030525107186580635510451981976744910633195355553512178003079846862007754638313372881933103157
]

primes = []
for sq in prime_squares:
  primes.append(get_sqrt(sq))

for i in range(5):
  remainders[i] %= primes[i]

mul = 1
for i in range(5):
  mul *= (primes[i] - 1)

mod = 1
for i in range(5):
  mod *= primes[i]

def gcd(x, y):
  """greatest common divisor of x and y"""
  while y:
      x, y = y, x % y
  return x

def chinese_remainder(a, p):
    """returns x s.t. x = a[i] (mod p[i]) where p[i] is prime for all i"""
    prod = reduce(op.mul, p, 1)
    x = [prod // pi for pi in p]
    return sum(a[i] * pow(x[i], p[i] - 2, p[i]) * x[i] for i in range(len(a))) % prod

ans = chinese_remainder(remainders, primes)

exp = inverse(65537, mul)
ans = big_exp(ans, exp, mod)

print(ans)
print(long_to_bytes(ans))