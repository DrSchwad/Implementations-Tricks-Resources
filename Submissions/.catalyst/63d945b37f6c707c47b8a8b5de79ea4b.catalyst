{"title":"E1. Square-free division (easy version)","contestId":"1497","contestName":"Codeforces Round #708 (Div. 2)","problemIndex":"E1","timeLimit":"2 seconds","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p><span class=\"tex-font-style-bf\">This is the easy version of the problem. The only difference is that in this version $$$k = 0$$$.</span></p><p>There is an array $$$a_1, a_2, \\ldots, a_n$$$ of $$$n$$$ positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers (on different positions), whose product is a perfect square.</p><p>Moreover, it is allowed to do at most $$$k$$$ such operations before the division: choose a number in the array and change its value to any positive integer. But in this version $$$k = 0$$$, so it is not important.</p><p>What is the minimum number of continuous segments you should use if you will make changes optimally?</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ $$$(1 \\le t \\le 1000)$$$ &nbsp;— the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$, $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$k = 0$$$).</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^7$$$).</p><p>It's guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>For each test case print a single integer &nbsp;— the answer to the problem.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first test case the division may be as follows:</p><ul> <li> $$$[18, 6]$$$ </li><li> $$$[2, 4]$$$ </li><li> $$$[1]$$$ </li></ul>","sampleTestcases":[{"id":1615991949465,"input":"3\n5 0\n18 6 2 4 1\n5 0\n6 8 1 24 8\n1 0\n1\n","output":"3\n2\n1\n"}],"submitUrl":"https://codeforces.com/contest/1497/submit","language":"c++"}