{"title":"E. Nastia and a Beautiful Matrix","contestId":"1521","contestName":"Codeforces Round #720 (Div. 2)","problemIndex":"E","timeLimit":"2 seconds","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p><span class=\"tex-font-style-it\">You like numbers, don't you? Nastia has a lot of numbers and she wants to share them with you! Isn't it amazing?</span></p><p>Let $$$a_i$$$ be how many numbers $$$i$$$ ($$$1 \\le i \\le k$$$) you have.</p><p>An $$$n \\times n$$$ matrix is called beautiful if it contains <span class=\"tex-font-style-bf\">all</span> the numbers you have, and for <span class=\"tex-font-style-bf\">each</span> $$$2 \\times 2$$$ submatrix of the original matrix is satisfied: </p><ol> <li> The number of occupied cells doesn't exceed $$$3$$$; </li><li> The numbers on each diagonal are distinct. </li></ol><p>Make a beautiful matrix of <span class=\"tex-font-style-bf\">minimum</span> size.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$)&nbsp;— the number of test cases.</p><p>The first line of each test case contains $$$2$$$ integers $$$m$$$ and $$$k$$$ ($$$1 \\le m, k \\le 10^5$$$)&nbsp;— how many numbers Nastia gave you and the length of the array $$$a$$$, respectively.</p><p>The second line of each test case contains $$$k$$$ integers $$$a_1, a_2, \\ldots, a_{k}$$$ ($$$0 \\le a_i \\le m$$$, $$$a_1 + a_2 + \\ldots + a_{k} = m$$$), where $$$a_i$$$ is how many numbers $$$i$$$ you have.</p><p>It's guaranteed that the sum of $$$m$$$ and $$$k$$$ in one test doesn't exceed $$$2 \\cdot 10^5$$$.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>For each $$$t$$$ test case print a single integer $$$n$$$&nbsp;— the size of the beautiful matrix.</p><p>In the next $$$n$$$ lines print $$$n$$$ integers $$$b_{i, j}$$$ ($$$0 \\le b_{i, j} \\le k$$$; if position is empty, print $$$b_{i, j} = 0$$$)&nbsp;— the beautiful matrix $$$b$$$ you made up. </p>","noteHtml":"<div class=\"section-title\">Note</div><p><span class=\"tex-font-style-bf\">Note that $$$0$$$ in this problem represents a blank, not a number.</span></p><p>Examples of possible answers for the first test case:</p><p>$$$\\begin{array}{cc} 1 &amp; 1 \\\\ 4 &amp; 0 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 &amp; 4 \\\\ 1 &amp; 0 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 &amp; 0 \\\\ 1 &amp; 1 \\\\ \\end{array}$$$</p><p>Examples of <span class=\"tex-font-style-bf\">not</span> beautiful matrices for the first test case:</p><p>$$$\\begin{array}{cc} 1 &amp; 0 \\\\ 4 &amp; 1 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 &amp; 1 \\\\ 7 &amp; 1 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 &amp; 0 \\\\ 4 &amp; 0 \\\\ \\end{array}$$$</p><p>The example of the <span class=\"tex-font-style-bf\">not</span> beautiful matrix for the second test case:</p><p>$$$\\begin{array}{cc} 3 &amp; 4 &amp; 0 &amp; 2 &amp; 2 \\\\ 3 &amp; 2 &amp; 3 &amp; 3 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 3 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 3 &amp; 3 &amp; 3 \\\\ \\end{array}$$$</p><p>Everything is okay, except the left-top submatrix contains $$$4$$$ numbers.</p>","sampleTestcases":[{"id":1620655869602,"input":"2\n3 4\n2 0 0 1\n15 4\n2 4 8 1\n","output":"2\n4 1\n0 1\n5\n3 0 0 2 2\n3 2 3 3 0\n0 1 0 4 0\n3 0 0 0 0\n2 1 3 3 3"}],"submitUrl":"https://codeforces.com/contest/1521/submit","language":"c++","editorial":"<div><p>Let's fix $$$n$$$ and will check whether we build a beautiful matrix or not.</p><p>Let's define the variable $$$mx$$$ as a maximum element among all elements from the array $$$a$$$. In other words, the amount of the most frequently occurring number we have. Also, define the variable $$$sum$$$ as an amount of numbers we have.</p><p>We can single out the $$$2$$$ criteria. These are $$$sum \\le n ^ 2 - \\lfloor \\frac {n} {2} \\rfloor ^ 2$$$ and $$$mx \\le n \\cdot \\lceil \\frac {n} {2} \\rceil$$$. It can be proved by spitting the matrix into disjoint matrices $$$2 \\times 2$$$. </p><p>Let's construct the structure of the matrix and provide the algorithm of arrangement, that if the previous $$$2$$$ conditions are satisfied, then we always can create the beautiful matrix of $$$n$$$ size. Take a look at the picture:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/cf6e9e5038f045dec304241ccca07602fa7f370a.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>There are $$$4$$$ types of cells. White cells are empty, blue ones can consist of any number.</p><p>Let's fill yellow and red cells in a way that they don't have any common number. We will do it greedily:</p><p>Let's fill red cells at first. Let's take numbers $$$x$$$, which is the most frequently occurring, and just try to fill red cells using only it.</p><p>If all numbers $$$x$$$ are fully fit there, then we just take a new $$$x$$$ and continue filling cells. If there are elements of color $$$x$$$ that cannot be placed there then we put all such remaining elements in blue cells. </p><p>It is always possible to do because the number of blue cells and yellow cells together is $$$n \\cdot \\lceil \\frac {n} {2} \\rceil$$$, that is the upper bound of the value $$$mx$$$. In this way, we filled red cells and some blue cells. </p><p>The other elements, which haven't been placed yet, can be placed randomly because they won't match(by diagonal) due to the way of filling red cells. </p></div>"}