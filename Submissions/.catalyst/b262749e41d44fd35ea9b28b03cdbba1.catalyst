{"title":"F. Goblins And Gnomes","contestId":"1525","contestName":"Educational Codeforces Round 109 (Rated for Div. 2)","problemIndex":"F","timeLimit":"4 seconds","memLimit":"512 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>Monocarp plays a computer game called \"Goblins and Gnomes\". In this game, he manages a large underground city of gnomes and defends it from hordes of goblins.</p><p>The city consists of $$$n$$$ halls and $$$m$$$ one-directional tunnels connecting them. The structure of tunnels has the following property: if a goblin leaves any hall, he cannot return to that hall. </p><p>The city will be attacked by $$$k$$$ waves of goblins; during the $$$i$$$-th wave, $$$i$$$ goblins attack the city. Monocarp's goal is to pass all $$$k$$$ waves.</p><p>The $$$i$$$-th wave goes as follows: firstly, $$$i$$$ goblins appear in some halls of the city and pillage them; <span class=\"tex-font-style-bf\">at most one goblin appears in each hall</span>. Then, goblins start moving along the tunnels, pillaging all the halls in their path. </p><p>Goblins are very greedy and cunning, so they choose their paths so that no two goblins pass through the same hall. Among all possible attack plans, they choose a plan which allows them to <span class=\"tex-font-style-bf\">pillage the maximum number of halls</span>. After goblins are done pillaging, they leave the city.</p><p>If all halls are pillaged during the wave — Monocarp loses the game. Otherwise, the city is restored. If some hall is pillaged during a wave, goblins are still interested in pillaging it during the next waves.</p><p>Before each wave, Monocarp can spend some time preparing to it. Monocarp doesn't have any strict time limits on his preparations (he decides when to call each wave by himself), but the longer he prepares for a wave, the fewer points he gets for passing it. If Monocarp prepares for the $$$i$$$-th wave for $$$t_i$$$ minutes, then he gets $$$\\max(0, x_i - t_i \\cdot y_i)$$$ points for passing it (obviously, if he doesn't lose in the process).</p><p>While preparing for a wave, Monocarp can block tunnels. He can spend one minute to <span class=\"tex-font-style-bf\">either block all tunnels leading from some hall or block all tunnels leading to some hall</span>. If Monocarp blocks a tunnel while preparing for a wave, it stays blocked during the next waves as well.</p><p>Help Monocarp to defend against all $$$k$$$ waves of goblins and get the maximum possible amount of points!</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \\le n \\le 50$$$; $$$0 \\le m \\le \\frac{n(n - 1)}{2}$$$; $$$1 \\le k \\le n - 1$$$)&nbsp;— the number of halls in the city, the number of tunnels and the number of goblin waves, correspondely.</p><p>Next $$$m$$$ lines describe tunnels. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$; $$$u_i \\ne v_i$$$). It means that the tunnel goes from hall $$$u_i$$$ to hall $$$v_i$$$. <span class=\"tex-font-style-bf\">The structure of tunnels has the following property: if a goblin leaves any hall, he cannot return to that hall</span>. There is at most one tunnel between each pair of halls.</p><p>Next $$$k$$$ lines describe the scoring system. The $$$i$$$-th line contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i \\le 10^9$$$; $$$1 \\le y_i \\le 10^9$$$). If Monocarp prepares for the $$$i$$$-th wave for $$$t_i$$$ minutes, then he gets $$$\\max(0, x_i - t_i \\cdot y_i)$$$ points for passing it.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Print the optimal Monocarp's strategy in the following format:</p><p>At first, print one integer $$$a$$$ ($$$k \\le a \\le 2n + k$$$)&nbsp;— the number of actions Monocarp will perform. Next, print actions themselves in the order Monocarp performs them. The $$$i$$$-th action is described by a single integer $$$b_i$$$ ($$$-n \\le b_i \\le n$$$) using the following format:</p><ul> <li> if $$$b_i &gt; 0$$$ then Monocarp blocks all tunnels going out from the hall $$$b_i$$$; </li><li> if $$$b_i &lt; 0$$$ then Monocarp blocks all tunnels going into the hall $$$|b_i|$$$; </li><li> if $$$b_i = 0$$$ then Monocarp calls the next goblin wave. </li></ul><p>You can't repeat the same block action $$$b_i$$$ several times. Monocarp must survive all waves he calls (goblins shouldn't be able to pillage all halls). Monocarp should call exactly $$$k$$$ waves and earn the maximum possible number of points in total.</p><p>If there are several optimal strategies&nbsp;— print any of them.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first example, Monocarp, firstly, block all tunnels going in hall $$$2$$$, secondly&nbsp;— all tunnels going in hall $$$3$$$, and after that calls all waves. He spent two minutes to prepare to wave $$$1$$$, so he gets $$$98$$$ points for it. He didn't prepare after that, that's why he gets maximum scores for each of next waves ($$$200$$$, $$$10$$$ and $$$100$$$). In total, Monocarp earns $$$408$$$ points.</p><p>In the second example, Monocarp calls for the first wave immediately and gets $$$100$$$ points. Before the second wave he blocks all tunnels going in hall $$$3$$$. He spent one minute preparing to the wave, so he gets $$$195$$$ points. Monocarp didn't prepare for the third wave, so he gets $$$10$$$ points by surviving it. Before the fourth wave he blocks all tunnels going out from hall $$$1$$$. He spent one minute, so he gets $$$99$$$ points for the fourth wave. In total, Monocarp earns $$$404$$$ points.</p><p>In the third example, it doesn't matter how many minutes Monocarp will spend before the wave, since he won't get any points for it. That's why he decides to block all tunnels in the city, spending $$$5$$$ minutes. He survived the wave though without getting any points.</p>","sampleTestcases":[{"id":1621162109140,"input":"5 4 4\n1 2\n2 3\n4 3\n5 3\n100 1\n200 5\n10 10\n100 1\n","output":"6\n-2 -3 0 0 0 0 \n","result":{"id":1621162109140,"stdout":"6\n-3 1 0 0 0 0\n","stderr":"","exitcode":0,"signal":null,"time":150,"timeout":false}},{"id":1621162109141,"input":"5 4 4\n1 2\n2 3\n4 3\n5 3\n100 100\n200 5\n10 10\n100 1\n","output":"6\n0 -3 0 0 1 0\n","result":{"id":1621162109141,"stdout":"6\n0 -3 0 0 1 0\n","stderr":"","exitcode":0,"signal":null,"time":150,"timeout":false}},{"id":1621162109142,"input":"5 10 1\n1 2\n1 3\n1 4\n1 5\n5 2\n5 3\n5 4\n4 2\n4 3\n2 3\n100 100\n","output":"6\n1 2 3 4 5 0\n","result":{"id":1621162109142,"stdout":"2\n5 0\n","stderr":"","exitcode":0,"signal":null,"time":135,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1525/submit","language":"c++","editorial":"<div><p>First of all, let's try to solve the following problem: given a DAG, cover its vertices with the minimum number of vertex-disjoint paths. Solving this problem allows us to calculate the number of goblins that can pillage all of the halls when the tunnel network is fixed. This problem is a fairly classical one; since the number of vertices in each path is greater than the number of arcs in it exactly by $$$1$$$, we should take the maximum possible number of arcs into our paths. So we can reduce this problem to bipartite maximum matching — build a bipartite graph where each part consists of $$$n$$$ vertices, and for every directed arc $$$(x, y)$$$ in the original graph, connect the vertex $$$x$$$ of the left part to the vertex $$$y$$$ in the right part of the bipartite graph. The maximum matching in this graph allows us to pick the maximum number of arcs into the paths of the original problem (the matching ensures that each vertex has at most one chosen ingoing arc and at most one chosen outgoing arc, so the paths are vertex-disjoint). Okay, now we at least can check if the goblin wave can pillage all of the halls.</p><p>Let's say that the minimum number of goblins required to pillage the original city is $$$c$$$. Obviously, in order to pass the $$$c$$$-th wave and waves after it, we have to increase this number. In one minute, Monocarp can block all of the tunnels leading to some hall or out of some hall — and in terms of our reduction to the bipartite matching problem, it means that we remove all edges connected to some vertex of the bipartite graph. Obviously, in one minute, we can increase $$$c$$$ by at most $$$1$$$, since $$$c$$$ is equal to the difference between $$$n$$$ and the maximum matching size.</p><p>It turns out that it's always possible to choose a vertex that belongs to all maximum matchings in the bipartite graph (note that it doesn't work in non-bipartite graphs, but in our problem, it doesn't matter). For the proof of this fact, you can check the last paragraph of the editorial. So, each minute Monocarp prepares for a wave, he increases the maximum number of goblins he can repel by $$$1$$$.</p><p>Now the solution splits into two much easier parts. The first part is finding a sequence in which Monocarp blocks the tunnels, so that each his action reduces the size of the maximum matching by $$$1$$$. Since the constraints are small, even a naive approach in $$$O(n^5)$$$ — always iterate on the vertex we try to remove from the graph and check that removing it is possible by running Kuhn's algorithm — is fast enough. The second part is to choose when Monocarp calls waves of goblins and when he prepares for them — this can be easily done with dynamic programming: let $$$dp_{i,j}$$$ be the maximum Monocarp's score if he has already passed $$$i$$$ waves, and the current size of the maximum matching is $$$j$$$. The most naive implementation of this dynamic programming runs in $$$O(n^3)$$$, so the whole solution works in $$$O(n^5)$$$.</p><p>We can improve it to $$$O(n^3)$$$, though it is not needed under these constraints. Instead of finding the vertices to remove from the bipartite graph one-by-one, let's find all of them at once in $$$O(n^3)$$$. Recall that the size of maximum matching in a bipartite graph is equal to the size of its minimum vertex cover, and the minimum vertex cover can be reconstructed after finding the maximum matching. If we remove a vertex from the minimum vertex cover, the size of the minimum vertex cover of the remaining graph is reduced by $$$1$$$, so the size of the maximum matching is reduced by $$$1$$$ as well. It means that we can always choose to remove a vertex from the minimum vertex cover we found. By the way, it also proves that it's always possible to remove a vertex from a bipartite graph so the size of the maximum matching decreases by $$$1$$$ (obviously, if it's not $$$0$$$ already).</p></div>","langId":"54"}