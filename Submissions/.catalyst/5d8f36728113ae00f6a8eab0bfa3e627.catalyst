{"title":"C. Travelling Salesman Problem","contestId":"1503","contestName":"Codeforces Round #712 (Div. 1)","problemIndex":"C","timeLimit":"2 seconds","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>There are $$$n$$$ cities numbered from $$$1$$$ to $$$n$$$, and city $$$i$$$ has beauty $$$a_i$$$.</p><p>A salesman wants to start at city $$$1$$$, visit every city exactly once, and return to city $$$1$$$.</p><p>For all $$$i\\ne j$$$, a flight from city $$$i$$$ to city $$$j$$$ costs $$$\\max(c_i,a_j-a_i)$$$ dollars, where $$$c_i$$$ is the price floor enforced by city $$$i$$$. Note that there is no absolute value. Find the minimum total cost for the salesman to complete his trip.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$2\\le n\\le 10^5$$$) — the number of cities.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contains two integers $$$a_i$$$, $$$c_i$$$ ($$$0\\le a_i,c_i\\le 10^9$$$) — the beauty and price floor of the $$$i$$$-th city.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Output a single integer — the minimum total cost.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first test case, we can travel in order $$$1\\to 3\\to 2\\to 1$$$. </p><ul> <li> The flight $$$1\\to 3$$$ costs $$$\\max(c_1,a_3-a_1)=\\max(9,4-1)=9$$$. </li><li> The flight $$$3\\to 2$$$ costs $$$\\max(c_3, a_2-a_3)=\\max(1,2-4)=1$$$. </li><li> The flight $$$2\\to 1$$$ costs $$$\\max(c_2,a_1-a_2)=\\max(1,1-2)=1$$$. </li></ul><p></p><p>The total cost is $$$11$$$, and we cannot do better.</p>","sampleTestcases":[{"id":1617463237887,"input":"3\n1 9\n2 1\n4 1","output":"11\n","result":{"id":1617463237887,"stdout":"11\n","stderr":"","exitcode":0,"signal":null,"time":106,"timeout":false}},{"id":1617463237888,"input":"6\n4 2\n8 4\n3 0\n2 3\n7 1\n0 1","output":"13\n","result":{"id":1617463237888,"stdout":"13\n","stderr":"","exitcode":0,"signal":null,"time":99,"timeout":false}},{"id":1617541259678,"input":"4\n2 3\n3 0\n9 2\n1 6","output":"13","result":{"id":1617541259678,"stdout":"13\n","stderr":"","exitcode":0,"signal":null,"time":98,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1503/submit","language":"c++","langId":"54","editorial":"<div><p>Let's reindex the cities so they are in increasing order of beauty. Note that it doesn't matter which city we call the start: the trip will be a cycle visiting every city exactly once.</p><p>Let's rewrite the cost of a flight $$$i\\to j$$$ as $$$$$$\\max(c_i, a_j-a_i)=c_i+\\max(0, a_j-a_i-c_i).$$$$$$</p><p>Since we always need to leave each city exactly once, we can ignore the $$$c_i$$$ term from all flights and only try to minimize the sum of $$$\\max(0,a_j-a_i-c_i).$$$ </p><p>Note that a flight to a city of smaller beauty is always free in the adjusted cost. So all we need is a path from $$$a_1$$$ to $$$a_n$$$, and the rest of the trip can be done for free. Also, any valid trip will contain a path from $$$a_1$$$ to $$$a_n$$$, so the shortest path is optimal.</p><p><span class=\"tex-font-style-bf\">Solution 1</span></p><p>All we have to do is encode the graph without storing all edges explicitly, and we can simply run Dijkstra's algorithm to find the shortest path. Add the following edges: </p><ol> <li> $$$a_i\\to a_{i-1}$$$ with weight $$$0$$$. </li><li> $$$i\\to j$$$ with weight $$$0$$$, where $$$j$$$ is the largest index with $$$a_j-a_i-c_i\\le 0$$$. The index $$$j$$$ can be found with binary search. </li><li> $$$i\\to j+1$$$ with weight $$$\\max(0, a_{j+1}-a_i-c_i)$$$ where $$$j$$$ is the same as before. </li></ol><p>Every edge in this new graph corresponds to an edge in the original graph, and every edge in the original graph corresponds to a path in the new graph with at most the same cost. So the distance from $$$a_1$$$ to $$$a_n$$$ is preserved.</p><p><span class=\"tex-font-style-bf\">Solution 2</span></p><p>A simpler solution is to compute for all $$$i&gt;1$$$, the minimum possible cost of the first trip reaching $$$a_i$$$ or larger. It's easy to see that any path must have at least this cost, and we can construct a path of this cost since moving to smaller $$$a_i$$$ is free. It corresponds to the following summation.</p><p>$$$$$$\\sum_{i=2}^n \\max(0, a_i-\\max_{j&lt;i}(a_j+c_j))$$$$$$</p><p>Complexity is $$$O(n\\log n)$$$.</p></div>"}