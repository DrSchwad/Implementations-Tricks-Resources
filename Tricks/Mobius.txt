Let d(x) be the number of divisors of x. Mobius enables us to build
a data structure that supports:

1. Add number x to the structure in O(d(x)) ~ O(sqrt(x)).
1. Remove a number x from the structure in O(d(x)) ~ O(sqrt(x)).
2. For a certain number x, find the number of integers in
   the structure that are coprime to x in O(d(x)) ~ O(sqrt(x)).

Code:

vector<int> divs[N];
int cnt[N];
int mu[N];

void update(int at, int val) {
	for (int d : divs[at]) cnt[d] += val;
}

int coprime(int at) {
	int ret = 0;
	for (int d : divs[at]) ret += mu[d] * cnt[d];
	return ret;
}

void build() {
	for (int i = 1; i < N; i++) {
		for (int j = i; j < N; j += i) {
			divs[j].push_back(i);
		}
		if (i == 1) mu[i] = 1;
		else if (i / divs[i][1] % divs[i][1] != 0) mu[i] = -mu[i / divs[i][1]];
	}
}

void test() {
	build();
	int num = 10;
	update(num, 1); // add num to the ds
	cout << coprime(num) << endl; // number of coprimes to num in the ds
	update(num, -1); // remove num from the ds
}