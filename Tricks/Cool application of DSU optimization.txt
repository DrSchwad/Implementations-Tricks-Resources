# Problem

Suppose we have N, 1 <= N <= 1e5, arrays, arr[i], given 1 <= sum of |arr[i]| <= 1e5.
We also have Q, 1 <= Q <= 1e5, queries. In each query we'll be given a, b and to solve the query we have to iterate over one of the arrays arr[a], arr[b] and do a binary search over the other one.
Answer for a query (a, b) is fixed, ie we must get the same answer for this pair no matter when the query is asked.

# Solution-1 O(N sqrt(Q) log(N) + Q log(Q))

For each query, iterate over the smaller one in size of those two arrays and do binary search over the other one. Also, after solving a query, keep the answer for this pair to reuse if this pair appears in later queries.
For a proof of the time complexity: https://codeforces.com/blog/entry/12959#comment-592388

# Solution-2 O(N sqrt(N) + Q sqrt(N))

For all i with |arr[i]| >= sqrt(N), precompute the answer for all pairs (i, j), (j, i) where 1 <= j <= N. This step takes O(N sqrt(N)).
If any query contains such an i, then answer from these precomputations. Otherwise use two-pointer iteration to answer in O(sqrt(N)). This step takes O(Q sqrt(N)).